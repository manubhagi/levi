1.33. Search in Rotated Sorted Array

There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

sol.

int search(int* nums, int numsSize, int target) {
    int low = 0, high = numsSize - 1;
    
    while (low <= high) {
        int mid = low + (high - low) / 2;
        
        if (nums[mid] == target) {
            return mid;
        }
        
        if (nums[low] <= nums[mid]) {
            // Left half is sorted
            if (nums[low] <= target && target < nums[mid]) {
                high = mid - 1;  // Search left half
            } else {
                low = mid + 1;   // Search right half
            }
        } else {
            // Right half is sorted
            if (nums[mid] < target && target <= nums[high]) {
                low = mid + 1;   // Search right half
            } else {
                high = mid - 1;  // Search left half
            }
        }
    }
    
    return -1;  // Target not found
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

2.Search a 2D Matrix

You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

Example:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Sol.
bool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target) {
    if (matrixSize == 0 || *matrixColSize == 0) {
        return false;
    }

    int l = 0, h = matrixSize - 1;
    int l1 = 0;
    int size = *matrixColSize;
    int h1 = size - 1;

    while (l <= h) {
        int mid = (l + h) / 2;

        if (matrix[mid][l1] <= target && matrix[mid][h1] >= target) {

            while (l1 <= h1) {
                int mid1 = (l1 + h1) / 2;
                if (matrix[mid][mid1] == target) {
                    return true;
                } else if (matrix[mid][mid1] > target) {
                    h1 = mid1 - 1;
                } else {
                    l1 = mid1 + 1;
                }

            }
        } else if (matrix[mid][l1] > target) {
            h = mid - 1;
        } else {
            l = mid + 1;
        }
    }

    return false;
}

